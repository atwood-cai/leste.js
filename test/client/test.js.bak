(function() {
    var expect = chai.expect;
    describe('main', function() {
        describe('fetch', function() {
            var url = 'http://buff.360.cn/test/server/data.php';
            it('fetch 返回的应该是一个 promise 对象', function() {
                var xhr = fetch(url);
                expect(xhr instanceof Promise).to.equal(true);
            });

            it('fetch -> 不带参数请求', function(done) {
                return fetch(url).then(function(res) {
                    res.text().then(function(txt) {
                        expect(txt).to.equal('cool');
                        done();
                    });
                });
            });

            it('fetch -> GET 带参数请求', function(done) {
                return fetch(url, {
                    method: 'get',
                    data: 'data=11',
                }).then(function(res) {
                    res.text().then(function(txt) {
                        expect(txt).to.equal('get11');
                        done();
                    });
                });
            });

            it('fetch -> POST 带参数请求', function(done) {
                return fetch(url, {
                    method: 'post',
                    data: {data: 11}
                }).then(function(res) {
                    res.text().then(function(txt) {
                        expect(txt).to.equal('post11');
                        done();
                    });
                });
            });

            it('fetch -> timeout', function() {
                return fetch(url, {timeout: 1}).then(null, function(res, msg) {
                    expect(msg).to.equal('timeout');
                });
            });

            it('fetch -> 500 error', function() {
                return fetch(url, {data: 'code=500'}).then(null, function(res, msg) {
                    expect(res.status).to.equal(500);
                });
            });

            it('fetch -> 404 error', function() {
                return fetch('not_fond_url').then(null, function(xhr, msg) {
                    expect(xhr.statusText).to.equal('Not Found');
                });
            });
        });

        describe('Element', function() {
            var testEle = $('#testDiv');
            var btn = $('.testLink');

            describe('$', function() {
                it('$ -> get a element with selector (即 document.querySelector 简单封装)', function() {
                    var ele = $('body');
                    expect(ele && ele.tagName.toLowerCase()).to.equal('body');
                });

                it('$ -> createElement $("<div></div>")', function() {
                    var ele = $('<div class="test"></div>');
                    expect(ele.className).to.equal('test');
                });

                it('$ -> createElement $("<div>111</div><p></p>")', function() {
                    var ele = $('<div class="test"><p id="test">111</p></div><a>11></a>');
                    expect(ele.length).to.equal(2);
                });

                it('$$ -> get a element list with selector (即 document.querySelectorAll 简单封装)', function() {
                    var eles = $$('div');
                    expect(eles.length >= 2).to.equal(true);
                });
            });


            describe('classList', function() {
                it('classList -> ele`s class is [\'test-div\']', function() {
                    expect(testEle.classList[0]).to.equal('test-div');
                });

                it('classList.contains -> ele has class test-div', function() {
                    expect(testEle.classList.contains('test-div')).to.equal(true);
                });

                it('classList.add -> add a class test-add-class for #testDiv', function() {
                    testEle.classList.add('test-add-class');
                    expect(testEle.classList.contains('test-add-class')).equal(true);
                });

                it('classList.remove -> remove a class test-add-class from #testDiv', function() {
                    testEle.classList.remove('test-add-class');
                    expect(testEle.classList.contains('test-add-class')).equal(false);
                });

            });

            it('attr -> get a attr', function() {
                expect(testEle.attr('data-attr')).equal('testAttrVal');
            });

            it('attr -> set a attr', function() {
                testEle.attr('data-attr', 'otherVal');
                expect(testEle.attr('data-attr')).equal('otherVal');
            });

            it('html -> set a html content', function() {
                testEle.html('<p class="child">i am child</p>');
                expect($$('#testDiv .child').length).equal(1);
            });

            it('html -> get element html content', function() {
                expect($('#testDiv .child').html()).equal('i am child');
            });

            it('on -> add click event listener for element', function() {
                btn.on('click', function(e) {
                    expect(e.type.toLowerCase()).to.equal('click');
                });
                btn.click();
            });

            it('on -> add mousedown event and trigger it', function() {
                btn.on('mousedown', function(e) {
                    expect(e.type.toLowerCase()).to.equal('mousedown');
                });
                btn.trigger('mousedown');
            });

            it('on -> add custom event and trigger it with data', function() {
                btn.on('custom:event', function(e) {
                    expect(e.data.data).to.equal('cool');
                });
                btn.trigger('custom:event', {data: 'cool'});
            });

            it('on -> add keydown event and off it', function() {
                var isTrig = false;
                btn.on('keydown', function(e) {
                    isTrig = true;
                });
                btn.trigger('keydown');
                setTimeout(function() {
                    expect(isTrig).to.equal(false);
                }, 1000);
            });

            it('find -> find child from parent', function() {
                expect($('body').find('.test-div')[0]).equal(testDiv);
            });

            it('css -> set background for element', function() {
                testEle.css('background', 'red');
                expect('red').equal(testEle.style.background);
            });

            it('css -> set font-size for element', function() {
                testEle.css('fontSize', '23px');
                expect('23px').equal(testEle.style.fontSize);
            });


        });
    });
})();
